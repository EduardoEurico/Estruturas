#include <stdio.h>
#include <stdlib.h>

////////Programa que implementa uma matriz esparsa////////////



int numero=0;
/////////////Declaração de constantes//////////


const int modulo=3;


////Declaração de estruturas/////

struct no{
    int numero;
    struct no *proximoNo;

};


struct diretor{
    int resto;
    struct no *proximoNo;
    struct dirtor *proximoDiretor;

};

struct diretor *cabeca = NULL;


////Função que procura o diretor certo/////


struct diretor *procuraDiretor(int resto){
    struct diretor *ponteiro = cabeca;
    while((ponteiro!=NULL)&&(ponteiro->resto!=resto)){
        ponteiro=ponteiro->proximoDiretor;
    }

    if (ponteiro==NULL){
        //criar um diretor novo///
        ponteiro= (struct diretor*)malloc(sizeof(struct diretor));
        ponteiro->resto=resto;
        ponteiro->proximoNo=NULL;
        ponteiro->proximoDiretor=cabeca;

        cabeca=ponteiro;
    }
    return ponteiro;
};

////Função que insere um Nó na matriz esparsa///

void inserir(int numero){
    struct diretor *ponteiroDiretor = procuraDiretor(numero%modulo);

    struct no *novoNo=(struct no*)malloc(sizeof(struct no));

    novoNo->numero=numero;
    novoNo -> proximoNo = ponteiroDiretor -> proximoNo;
    ponteiroDiretor->proximoNo=novoNo;
}

//////Imrpimir//////

void imprimir(){
    struct diretor *ponteiroDiretor = cabeca;

    printf("=========================Matriz Esparsa========================\n");

    while (ponteiroDiretor!=NULL){
        struct no *ponteiroNo=ponteiroDiretor->proximoNo;
        printf("%d:\t",ponteiroDiretor -> resto);
            while(ponteiroNo !=NULL){
                printf("%d\t",ponteiroNo->numero);
                ponteiroNo=ponteiroNo->proximoNo;
            }
            printf("\n");
            ponteiroDiretor=ponteiroDiretor->proximoDiretor;
    }

}
void remover(int numero){
    struct diretor *ponteiroDiretor = procuraDiretor(numero%modulo);
    if (ponteiroDiretor->proximoNo !=NULL){
        if (ponteiroDiretor->proximoNo->numero ==numero){

            //caso facil,excluir o primeiro "no" da lista//
            struct no *ponteiroExcluir = ponteiroDiretor->proximoNo;
            ponteiroDiretor->proximoNo=ponteiroDiretor -> proximoNo->proximoNo;
            free(ponteiroExcluir);
        }else{
            //caso dificil. excluir algum "no" no meio da lista//

            struct no *ponteiroAnterior=ponteiroDiretor->proximoNo;

            while ((ponteiroAnterior->proximoNo!=NULL) && (ponteiroAnterior -> proximoNo ->numero !=numero)){
                ponteiroAnterior=ponteiroAnterior -> proximoNo;
            }
            if (ponteiroAnterior->proximoNo!=NULL){
                struct no *ponteiroExcluir=ponteiroAnterior -> proximoNo;
                ponteiroAnterior ->proximoNo = ponteiroExcluir ->proximoNo;
                free(ponteiroExcluir);
            }
        }
    }
}

int main(){
    int i=0;
    time_t t;
    int numero=0;
    for (i=0;i<100;i++){
        inserir(rand());
    }
    imprimir();
    printf("Digite um numero para excluir: ");
    scanf("%d",&numero);

    remover(numero);

    imprimir();

}
